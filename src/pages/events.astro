---
import EventCard from "../components/EventCard.astro";
import BaseLayout from "../layouts/BaseLayout.astro";
import TopSection from "../components/TopSection.astro";
import GrafikSection from "../components/GrafikSection.astro";
import BtnMakro from "../components/BtnMakro.astro";
const { title, text, makrocontent, makrohref } = Astro.props;
const { grafiknavn, grafikalt } = Astro.props;
import { supabase } from "../lib/supabaseClient.js";

interface EventData {
  id: number;
  name: string;
  description: string;
  date: string;
  slug: string;
  image_url: string;
}

// Hent data
const { data: events, error } = (await supabase
  .from("event_test")
  .select("id, name, excerpt, description, date, slug, image_url")) as {
  data: EventData[] | null;
  error: any;
};

if (error) {
  console.error("Fejl ved hentning af events:", error);
}
// Hvis der ikke er events, lav en fallback
const validEvents = events || [];

// Dagens dato
const today = new Date();

// Filtrer kun kommende events
const upcomingEvents = validEvents.filter(
  (event) => new Date(event.date) >= today
);

// Sorter kommende events efter dato (stigende rækkefølge)
upcomingEvents.sort(
  (a, b) => new Date(a.date).getTime() - new Date(b.date).getTime()
);

function formatDateToMonthYear(dateStr: string): {
  month: string;
  year: number;
} {
  const dateObj = new Date(dateStr);
  if (isNaN(dateObj.getTime())) {
    console.error("Ugyldig dato:", dateStr);
    return { month: "Ukendt måned", year: 0 };
  }
  const monthNames = [
    "januar",
    "februar",
    "marts",
    "april",
    "maj",
    "juni",
    "juli",
    "august",
    "september",
    "oktober",
    "november",
    "december",
  ];
  const month = monthNames[dateObj.getMonth()];
  const year = dateObj.getFullYear();
  return { month, year };
}
// Gruppér events efter måned og år
const groupedEvents: Record<string, EventData[]> = {};
for (const event of upcomingEvents) {
  const { month, year } = formatDateToMonthYear(event.date);
  const key = `${year}-${month}`;
  if (!groupedEvents[key]) {
    groupedEvents[key] = [];
  }
  groupedEvents[key].push(event);
}
---

<BaseLayout>
  <div class="sm:m-16 p-8 min-h-screen">
    <h1 class="place-self-center mb-8">kommende events:</h1>
    {
      Object.entries(groupedEvents).map(([key, eventsForMonth]) => {
        const [year, month] = key.split("-");
        return (
          <section class="mb-12">
            <h2 class=" place-self-center mb-4 ">
              {month} {year}
            </h2>
            <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-6">
              {eventsForMonth.map((event) => (
                <EventCard event={event} />
              ))}
            </div>
          </section>
        );
      })
    }
    <div class="place-self-center">
      <BtnMakro
        makrocontent="se tidligere events"
        makrohref="/pastevents"
        class="place-self-center"
      />
    </div>
  </div>

  <GrafikSection grafiknavn="/grafik/logokop.svg" grafikalt="sorte øje logo" />
  <TopSection
    title="har du en god ide til et event?"
    text="vi er altid åbne for gode forlsag og ideer, så hvis du går rundt med en god ide til en kunstudstilling, digtopløsning, koncert, eller noget helt fjerde, så tag endelig kontakt til os"
    makrocontent="kontakt os"
    makrohref="/kontakt"
  >
    <img
      src="/images/events/vinglas.webp"
      alt="champagne i vinlgas"
      class="w-full h-full object-cover"
    />
  </TopSection>

  <GrafikSection grafiknavn="/grafik/stjerne1.svg" grafikalt="stjerne" />
</BaseLayout>
